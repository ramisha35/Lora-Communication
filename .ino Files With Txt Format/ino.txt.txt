#include <RadioLib.h>
#include <HardwareSerial.h>

SX1268 radio = new Module(5, 33, 25, 32);
const int TXEN = 26;
const int RXEN = 27;

HardwareSerial sim800(1); 
unsigned long lastSMSTime = 0;
bool gsmReady = false;

struct Route {
  String name;
  String phoneNumber;
  String loraNumber;
};

Route routes[20];
int routeCount = 0;
const int MAX_ROUTES = 20;

void setup() {
  Serial.begin(115200);
  Serial.println("📡 ESP32 #2 - LoRa GSM Bridge");

  pinMode(TXEN, OUTPUT);
  pinMode(RXEN, OUTPUT);
  digitalWrite(TXEN, LOW);
  digitalWrite(RXEN, HIGH);

  int state = radio.begin(433.0);
  if (state == RADIOLIB_ERR_NONE)
    Serial.println(" LoRa initialized");
  else {
    Serial.print(" LoRa init failed: ");
    Serial.println(state);
    while (true);
  }

  Serial.println(" Initializing SIM800...");
  sim800.begin(9600, SERIAL_8N1, 21, 22);
  delay(3000); // Wait for module to boot
  
  for (int i = 0; i < 3; i++) {
    sim800.println("AT");
    if (waitForResponse("OK", 2000)) {
      Serial.println(" SIM800 responding");
      break;
    }
    delay(1000);
  }
  
  sim800.println("AT+CPIN?");
  delay(1000);
  String response = readResponse();
  Serial.print("SIM Status: ");
  Serial.println(response);
  
  sim800.println("AT+CMGF=1");
  delay(500);
  if (waitForResponse("OK", 1000)) {
    Serial.println("✅ SMS text mode set");
  } else {
    Serial.println("⚠️ Failed to set text mode");
  }
  
  sim800.println("AT+CSCS=\"GSM\"");
  delay(500);
  clearSimBuffer();
  
  sim800.println("AT+CMGD=1,4");
  delay(1000);
  clearSimBuffer();
  
  sim800.println("AT+CSQ");
  delay(500);
  response = readResponse();
  Serial.print("Signal: ");
  Serial.println(response);
  
  // Check if registered to network
  sim800.println("AT+CREG?");
  delay(500);
  response = readResponse();
  Serial.print("Network: ");
  Serial.println(response);
  
  if (response.indexOf("+CREG: 0,1") != -1 || response.indexOf("+CREG: 0,5") != -1) {
    gsmReady = true;
    Serial.println(" GSM Ready");
  } else {
    Serial.println(" GSM not registered to network");
  }

  Serial.println("\n System ready");
  Serial.println("\n Commands:");
  Serial.println("   ADD:Name:PhoneNumber:LoraNumber");
  Serial.println("   LIST");
  Serial.println("   TEST - Test SMS reading");
  Serial.println("   STATUS - Check GSM status\n");
}

void loop() {
  // Handle serial commands
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();
    handleSerialCommand(cmd);
  }

  // Receive from LoRa
  String rx;
  int st = radio.receive(rx);
  if (st == RADIOLIB_ERR_NONE && rx.length() > 0) {
    Serial.print(" LoRa RX: ");
    Serial.println(rx);

    if (rx.startsWith("TO:")) {
      parseAndSendSMS(rx);
    }
  }

  // Check for incoming SMS every 10 seconds (increased from 5)
  if (gsmReady && millis() - lastSMSTime > 10000) {
    checkIncomingSMS();
    lastSMSTime = millis();
  }
}

void parseAndSendSMS(String loraMsg) {
  String data = loraMsg.substring(3);
  
  int firstColon = data.indexOf(':');
  if (firstColon == -1) return;
  
  String recipientPhone = data.substring(0, firstColon);
  data = data.substring(firstColon + 1);
  
  int secondColon = data.indexOf(':');
  if (secondColon == -1) return;
  
  String senderLora = data.substring(0, secondColon);
  String message = data.substring(secondColon + 1);
  
  Serial.println(" Parsed:");
  Serial.print("  From LoRa: ");
  Serial.println(senderLora);
  Serial.print("  To Phone: ");
  Serial.println(recipientPhone);
  Serial.print("  Message: ");
  Serial.println(message);
  
  storeMapping(recipientPhone, senderLora);
  sendSMS(recipientPhone, message);
}

void sendSMS(String number, String msg) {
  if (!gsmReady) {
    Serial.println(" GSM not ready");
    return;
  }
  
  Serial.print(" Sending SMS to +995");
  Serial.println(number);
  
  // Ensure text mode
  sim800.println("AT+CMGF=1");
  delay(300);
  clearSimBuffer();

  sim800.print("AT+CMGS=\"+995");
  sim800.print(number);
  sim800.println("\"");
  
  unsigned long timeout = millis() + 5000;
  bool gotPrompt = false;
  while (millis() < timeout) {
    if (sim800.available() && sim800.read() == '>') {
      gotPrompt = true;
      break;
    }
  }
  
  if (!gotPrompt) {
    Serial.println(" No '>' prompt - SMS failed");
    clearSimBuffer();
    return;
  }

  sim800.print(msg);
  sim800.write(26); // Ctrl+Z
  delay(2000);
  
  if (waitForResponse("OK", 10000)) {
    Serial.println(" SMS sent successfully");
  } else {
    Serial.println(" SMS send failed");
  }
  clearSimBuffer();
}

void checkIncomingSMS() {
  // First ensure we're in text mode
  sim800.println("AT+CMGF=1");
  delay(300);
  clearSimBuffer();
  
  // List all unread messages
  sim800.println("AT+CMGL=\"REC UNREAD\"");
  delay(2000); // Increased delay
  
  String smsData = readResponse();
  
  if (smsData.indexOf("ERROR") != -1) {
    Serial.println(" SMS read error - trying to recover");
    
    // Try to fix by resetting text mode
    sim800.println("AT+CMGF=1");
    delay(500);
    clearSimBuffer();
    
    sim800.println("AT+CSCS=\"GSM\"");
    delay(500);
    clearSimBuffer();
    return;
  }
  
  if (smsData.length() == 0 || smsData.indexOf("+CMGL:") == -1) {
    return; // No messages
  }
  
  Serial.println("\n=== RAW SMS DATA ===");
  Serial.println(smsData);
  Serial.println("===================\n");
  
  // Parse SMS
  int cmglPos = smsData.indexOf("+CMGL:");
  while (cmglPos != -1) {
    int lineStart = cmglPos;
    int lineEnd = smsData.indexOf('\n', lineStart);
    if (lineEnd == -1) break;
    
    String cmglLine = smsData.substring(lineStart, lineEnd);
    
    // Extract phone number (third quoted field)
    int quote1 = cmglLine.indexOf('"');
    if (quote1 == -1) break;
    int quote2 = cmglLine.indexOf('"', quote1 + 1);
    if (quote2 == -1) break;
    int quote3 = cmglLine.indexOf('"', quote2 + 1);
    if (quote3 == -1) break;
    int quote4 = cmglLine.indexOf('"', quote3 + 1);
    if (quote4 == -1) break;
    
    String senderPhone = cmglLine.substring(quote3 + 1, quote4);
    
    // Remove country code
    if (senderPhone.startsWith("+995")) {
      senderPhone = senderPhone.substring(4);
    } else if (senderPhone.startsWith("+")) {
      senderPhone = senderPhone.substring(1);
    }
    
    // Extract message text
    int msgStart = lineEnd + 1;
    int nextCmgl = smsData.indexOf("+CMGL:", msgStart);
    int msgEnd = (nextCmgl != -1) ? nextCmgl : smsData.indexOf("\r\n\r\nOK", msgStart);
    if (msgEnd == -1) msgEnd = smsData.length();
    
    String messageText = smsData.substring(msgStart, msgEnd);
    messageText.trim();
    messageText.replace("\r\nOK", "");
    messageText.replace("\nOK", "");
    messageText.trim();
    
    if (messageText.length() > 0 && senderPhone.length() > 0) {
      Serial.println("\n📨 New SMS!");
      Serial.print("From: +995");
      Serial.println(senderPhone);
      Serial.print("Text: ");
      Serial.println(messageText);
      
      String recipientLora = findLoraRecipient(senderPhone);
      String loraMsg = "FROM:" + senderPhone + ":" + recipientLora + ":" + messageText;
      
      Serial.print("📡 Sending via LoRa: ");
      Serial.println(loraMsg);
      sendLoRa(loraMsg);
    }
    
    cmglPos = (nextCmgl != -1) ? nextCmgl : -1;
  }
  
  // Clear processed messages
  sim800.println("AT+CMGD=1,4");
  delay(500);
  clearSimBuffer();
}

String findLoraRecipient(String senderPhone) {
  for (int i = 0; i < routeCount; i++) {
    if (routes[i].phoneNumber == senderPhone) {
      return routes[i].loraNumber;
    }
  }
  return senderPhone;
}

void storeMapping(String phoneNumber, String loraNumber) {
  for (int i = 0; i < routeCount; i++) {
    if (routes[i].phoneNumber == phoneNumber) {
      routes[i].loraNumber = loraNumber;
      return;
    }
  }
  
  if (routeCount < MAX_ROUTES) {
    routes[routeCount].name = "Auto-" + phoneNumber;
    routes[routeCount].phoneNumber = phoneNumber;
    routes[routeCount].loraNumber = loraNumber;
    routeCount++;
  }
}

void handleSerialCommand(String cmd) {
  if (cmd.equalsIgnoreCase("LIST")) {
    Serial.println("\n=== Contact Mappings ===");
    for (int i = 0; i < routeCount; i++) {
      Serial.print(i + 1);
      Serial.print(". ");
      Serial.print(routes[i].name);
      Serial.print(" | Phone: ");
      Serial.print(routes[i].phoneNumber);
      Serial.print(" | LoRa: ");
      Serial.println(routes[i].loraNumber);
    }
    Serial.println("======================\n");
    return;
  }
  
  if (cmd.equalsIgnoreCase("TEST")) {
    Serial.println(" Testing SMS read...");
    checkIncomingSMS();
    return;
  }
  
  if (cmd.equalsIgnoreCase("STATUS")) {
    Serial.println("\n=== GSM Status ===");
    
    sim800.println("AT+CSQ");
    delay(500);
    Serial.print("Signal: ");
    Serial.println(readResponse());
    
    sim800.println("AT+CREG?");
    delay(500);
    Serial.print("Network: ");
    Serial.println(readResponse());
    
    sim800.println("AT+CMGF?");
    delay(500);
    Serial.print("SMS Mode: ");
    Serial.println(readResponse());
    
    Serial.println("==================\n");
    return;
  }
  
  if (cmd.startsWith("ADD:")) {
    String data = cmd.substring(4);
    int colon1 = data.indexOf(':');
    if (colon1 == -1) return;
    
    String name = data.substring(0, colon1);
    data = data.substring(colon1 + 1);
    
    int colon2 = data.indexOf(':');
    if (colon2 == -1) return;
    
    String phone = data.substring(0, colon2);
    String lora = data.substring(colon2 + 1);
    
    if (routeCount >= MAX_ROUTES) return;
    
    routes[routeCount].name = name;
    routes[routeCount].phoneNumber = phone;
    routes[routeCount].loraNumber = lora;
    routeCount++;
    
    Serial.println(" Contact added: " + name);
    return;
  }
}

String getContactName(String number) {
  for (int i = 0; i < routeCount; i++) {
    if (routes[i].phoneNumber == number || routes[i].loraNumber == number) {
      return routes[i].name;
    }
  }
  return "Unknown";
}

void sendLoRa(String msg) {
  digitalWrite(TXEN, HIGH);
  digitalWrite(RXEN, LOW);
  delay(10);
  
  int st = radio.transmit(msg);
  
  digitalWrite(TXEN, LOW);
  digitalWrite(RXEN, HIGH);
  
  if (st == RADIOLIB_ERR_NONE) {
    Serial.println(" LoRa TX success");
  } else {
    Serial.print(" LoRa TX failed: ");
    Serial.println(st);
  }
}

String readResponse() {
  String response = "";
  unsigned long timeout = millis() + 3000;
  
  while (millis() < timeout) {
    while (sim800.available()) {
      response += (char)sim800.read();
    }
  }
  return response;
}

void clearSimBuffer() {
  while (sim800.available()) {
    sim800.read();
  }
}

bool waitForResponse(String expected, unsigned long timeout) {
  String response = "";
  unsigned long start = millis();
  
  while (millis() - start < timeout) {
    while (sim800.available()) {
      response += (char)sim800.read();
      if (response.indexOf(expected) != -1) {
        return true;
      }
    }
  }
  return false;
}